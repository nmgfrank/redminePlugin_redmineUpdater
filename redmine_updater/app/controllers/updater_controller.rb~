require 'csv'
require 'tempfile'

class MultipleIssuesForUniqueValue < Exception
end

class NoIssueForUniqueValue < Exception
end


class UpdaterController < ApplicationController
 
    unloadable
  
    before_filter :find_project
  
    ISSUE_ATTRS = [:id, :subject, :assigned_to, :fixed_version,
    :author, :description, :category, :priority, :tracker, :status,
    :start_date, :due_date, :done_ratio, :estimated_hours,
    :parent_issue, :watchers ]
    
    def index
    end

    def wrong_csv
        @project_id = @project.id
        @error = params['error']
    end
  
    def match
        
        # Delete existing iip to ensure there can't be two iips for a user
        UpdateInProgresses.delete_all(["user_id = ?",User.current.id])
     
        # save import-in-progress data
        iip = UpdateInProgresses.find_or_create_by_user_id(User.current.id)
        iip.quote_char = params[:wrapper]
        iip.col_sep = params[:splitter]
        iip.encoding = params[:encoding]
        iip.created = Time.new
        iip.csv_data = params[:file].read
        iip.save
     
        
        # Put the timestamp in the params to detect
        # users with two imports in progress
        @import_timestamp = iip.created.strftime("%Y-%m-%d %H:%M:%S")
        @original_filename = params[:file].original_filename
        
        # display sample
        sample_count = 5
        i = 0
        @samples = []
        
        begin
            CSV.new(iip.csv_data, {:headers=>true,
                                   :encoding=>iip.encoding,
                                   :quote_char=>iip.quote_char,
                                   :col_sep=>iip.col_sep}).each do |row|
            
                @samples[i] = row
                i += 1
                if i >= sample_count
                    break
                end
            end # do
        rescue => err
           redirect_to(:action=>'wrong_csv',:project_id => params[:project_id], :error => err.to_s)
           return
        end            


        if @samples.size > 0
          @headers = @samples[0].headers
        end

        @headers.each do |header|
            if header.nil?
                redirect_to(:action=>'wrong_csv',:project_id => params[:project_id], :error => "there are nil value in headers :" + @headers.to_s)
                return
            end
        end
       
        # fields
        @attrs = Array.new
        ISSUE_ATTRS.each do |attr|
          #@attrs.push([l_has_string?("field_#{attr}".to_sym) ? l("field_#{attr}".to_sym) : attr.to_s.humanize, attr])
          @attrs.push([l_or_humanize(attr, :prefix=>"field_"), attr])
        end
        @project.all_issue_custom_fields.each do |cfield|
          @attrs.push([cfield.name, cfield.name])
        end
        IssueRelation::TYPES.each_pair do |rtype, rinfo|
          @attrs.push([l_or_humanize(rinfo[:name]),rtype])
        end
        @attrs.sort_by{|u| u[0]}
   
    end
  
  
    def pure_add
        _general_log('plugin: redmine_updater', 'pure_add')
        @handle_count = 0 # the num of records in csv
        @update_count = 0 # the num of records those were saved successfully
        @skip_count = 0 # the num of records whose were skipped, so such records are not processed
        @failed_count = 0 # the num of records those fails to be saved 
        @failed_issues = Hash.new # the Hash stores the records those fails to be saved
        @affect_projects_issues = Hash.new # ???????????????????????????
        # This is a cache of previously inserted issues indexed by the value
        # the user provided in the unique column
        @issue_by_unique_attr = Hash.new
        # Cache of user id by login
        @user_by_login = Hash.new
        # Cache of Version by name
        @version_id_by_name = Hash.new
        
        # Retrieve saved import data
        iip = UpdateInProgresses.find_by_user_id(User.current.id)
        if iip == nil
          flash[:error] = "No import is currently in progress(no proper data in database)."
          return
        end
        if iip.created.strftime("%Y-%m-%d %H:%M:%S") != params[:import_timestamp]
          flash[:error] = "You seem to have started another import " \
              "since starting this one. " \
              "This import cannot be completed"
          return
        end
        
        # key is the title in csv,  while value is the title in redmine 
        fields_map = {}
        params[:fields_map].each { |k, v| fields_map[k.unpack('U*').pack('U*')] = v }
        # attrs_map is fields_map's invert.
        # the key is title in redmine, while value is in csv.
        attrs_map = fields_map.invert
        # check params ????????????????

        add_versions = params[:add_versions]
        add_categories = params[:add_categories]
        default_tracker_id = params[:default_tracker]
        
        if default_tracker_id == nil
             flash[:error] = "defalut tracker should be refered. "       
        end
       
        row_cnt = 0
        @header_index_hash = Hash.new # key is title in csv, value is index which is start from 0.
        CSV.new(iip.csv_data, {:headers=>true,
                           :encoding=>iip.encoding,
                           :quote_char=>iip.quote_char,
                           :col_sep=>iip.col_sep}).each do |row| 
            Rails.logger.info "row is !!!!! " + row.to_s

            row.each do |k, v|
                k = k.unpack('U*').pack('U*') if k.kind_of?(String) && k.blank?
                v = v.unpack('U*').pack('U*') if v.kind_of?(String) && v.blank?
                row[k] = v.nil? ? "" : v.force_encoding("utf-8")
             
            end 
            # row : key is title in csv, value is the detail value in csv
            @handle_count += 1
            if row_cnt <= 0
                headers = row.headers
                inner_cnt = 0
                headers.each do |header|
                   @header_index_hash[header.unpack('U*').pack('U*')] = inner_cnt
                   inner_cnt =inner_cnt + 1
                end
            end
            row_cnt =row_cnt + 1

            Rails.logger.info "row is !!!!! " + row.to_s
             
            # create new issue
            issue = Issue.new
        
            begin  
                
                #project = Project.find_by_name(row[attrs_map["project"]])
                #if !project
                #  project = @project
                #end
                project = @project
                # ignore tracker, it is indicated by default_tracker_id   
                # tracker = Tracker.find_by_name(@header_index_hash[row[attrs_map["tracker"]]])
                default_tracker_id = default_tracker_id
                status = IssueStatus.find_by_name(row[attrs_map["status"]])
                priority = Enumeration.find_by_name(row[attrs_map["priority"]])
                fixed_version_name = row[@header_index_hash[attrs_map["fixed_version"]]].blank? ? nil : row[@header_index_hash[attrs_map["fixed_version"]]]
                fixed_version_id = fixed_version_name ? version_id_for_name!(project,fixed_version_name,add_versions) : nil  

            rescue ActiveRecord::RecordNotFound
                @failed_issues[@failed_count] = row
                @failed_count += 1
                row['fails reason'] = "record not found because of version"

                logger.info "When updating issue #{@failed_count} below, the #{@unfound_class} #{@unfound_key} was not found"
                next          
            end


            begin  
                category_name = row[attrs_map["category"]]
                category = IssueCategory.find_by_project_id_and_name(project.id, category_name)
                if (!category) && category_name && category_name.length > 0 && add_categories
                    category = project.issue_categories.build(:name => category_name)
                    category.save
                end
            rescue ActiveRecord::RecordNotFound
                category = nil
            end

            # set value for new issue
            issue.fixed_version_id = fixed_version_id != nil
            issue.project_id = project != nil ? project.id : @project.id
            issue.tracker_id = default_tracker_id
            issue.author_id = User.current.id
            issue.fixed_version_id = fixed_version_id != nil ? fixed_version_id : issue.fixed_version_id

            # set value for required attributes
            issue.status_id = status != nil ? status.id : issue.status_id
            issue.priority_id = priority != nil ? priority.id : issue.priority_id
            issue.subject = row[@header_index_hash[attrs_map["subject"]]] || issue.subject
 
            # optional attributes
            issue.description = row[@header_index_hash[attrs_map["description"]]] || issue.description
            issue.category_id = category != nil ? category.id : issue.category_id
            issue.start_date = row[@header_index_hash[attrs_map["start_date"]]].blank? ? nil : Date.parse(row[@header_index_hash[attrs_map["start_date"]]])
            issue.due_date = row[@header_index_hash[attrs_map["due_date"]]].blank? ? nil : Date.parse(row[@header_index_hash[attrs_map["due_date"]]])
            
            issue.fixed_version_id = fixed_version_id != nil ? fixed_version_id : issue.fixed_version_id
            issue.done_ratio = row[@header_index_hash[attrs_map["done_ratio"]]] || issue.done_ratio
            issue.estimated_hours = row[@header_index_hash[attrs_map["estimated_hours"]]] || issue.estimated_hours

            # custom fields
            custom_failed_count = 0
            h = {}
            issue.available_custom_fields.each do |cf|
                if value = row[@header_index_hash[attrs_map[cf.name]]]
                    begin
                        if cf.field_format == 'user'
                          value = user_id_for_login!(value).to_s
                        elsif cf.field_format == 'version'
                          value = version_id_for_name!(project,value,add_versions).to_s
                        elsif cf.field_format == 'date'
                          value = value.to_date.to_s(:db)
                        end
                        h[cf.id] = value
                    rescue
                        logger.info "When trying to set custom field #{cf.name} on issue #{@failed_count} below, value #{value} was invalid"
                    end
                end  
            end

            issue.custom_field_values = h
            


            # save
            unless issue.save
                logger.info "Error occurs while saving, for the value {#{row}} were found"
                @failed_count += 1
                @failed_issues[@failed_count] = row


                error_msg = ""
                issue.errors.each do |attr, error_message|
                    error_msg += attr.to_s + ",  " + error_message + " ;"
                end

                row['fails reason'] = "fails while saving at last step:  " + error_msg

            else
                logger.info "success to save #{row}"
                @update_count += 1 
            end

        end
        if @failed_issues.size > 0
          @failed_issues = @failed_issues.sort
          @headers = @failed_issues[0][1].headers
        end
        # Clean up after ourselves
        iip.delete
        
        # Garbage prevention: clean up iips older than 3 days
        UpdateInProgresses.delete_all(["created < ?",Time.new - 3*24*60*60])

    end

  
    def pure_update
        _general_log('plugin: redmine_updater', 'pure_update')
    
        @handle_count = 0 # the num of records in csv
        @update_count = 0 # the num of records those were saved successfully
        @skip_count = 0 # the num of records whose were skipped, so such records are not processed
        @failed_count = 0 # the num of records those fails to be saved 
        @failed_issues = Hash.new # the Hash stores the records those fails to be saved
        @affect_projects_issues = Hash.new # ???????????????????????????
        # This is a cache of previously inserted issues indexed by the value
        # the user provided in the unique column
        @issue_by_unique_attr = Hash.new
        # Cache of user id by login
        @user_by_login = Hash.new
        # Cache of Version by name
        @version_id_by_name = Hash.new
        
        # Retrieve saved import data
        iip = UpdateInProgresses.find_by_user_id(User.current.id)
        if iip == nil
          flash[:error] = "No import is currently in progress(no proper data in database)."
          return
        end
        if iip.created.strftime("%Y-%m-%d %H:%M:%S") != params[:import_timestamp]
          flash[:error] = "You seem to have started another import " \
              "since starting this one. " \
              "This import cannot be completed"
          return
        end
        

        default_tracker = params[:default_tracker]
        unique_field = params[:unique_field].empty? ? nil : params[:unique_field]
        # key is the title in csv,  while value is the title in redmine 
        fields_map = {}
        params[:fields_map].each { |k, v| fields_map[k.unpack('U*').pack('U*')] = v }
        add_versions = params[:add_versions]
        unique_attr = fields_map[unique_field]

        Rails.logger.info "default_tracker is " + default_tracker
      
       
        # attrs_map is fields_map's invert.
        # the key is title in redmine, while value is in csv.
        attrs_map = fields_map.invert
        # check params ????????????????
        
        if default_tracker == nil
             flash[:error] = "defalut tracker should be refered. "       
        end
        unique_error = nil
        
        if unique_attr == nil
          flash[:error] = "Unique key should be refered. "
          return  
        end
        
        row_cnt = 0
        @header_index_hash = Hash.new # key is title in csv, value is index which is start from 0.
        CSV.new(iip.csv_data, {:headers=>true,
                           :encoding=>iip.encoding,
                           :quote_char=>iip.quote_char,
                           :col_sep=>iip.col_sep}).each do |row| 
            row.each do |k, v|
                k = k.unpack('U*').pack('U*') if k.kind_of?(String) && k.blank?
                v = v.unpack('U*').pack('U*') if v.kind_of?(String) && v.blank?
                row[k] = v
            end 
            # row : key is title in csv, value is the detail value in csv
            @handle_count += 1

            if row_cnt <= 0
                headers = row.headers
                inner_cnt = 0
                headers.each do |header|
                   @header_index_hash[header.unpack('U*').pack('U*')] = inner_cnt
                   inner_cnt =inner_cnt + 1
                end
            end
            row_cnt =row_cnt + 1
             
            #project = Project.find_by_name(row[attrs_map["project"]])
            #if !project
            #  project = @project
            #end
            project = @project

            begin     
                tracker = Tracker.find_by_name(@header_index_hash[row[attrs_map["tracker"]]])

                fixed_version_name = row[@header_index_hash[attrs_map["fixed_version"]]].blank? ? nil : row[@header_index_hash[attrs_map["fixed_version"]]]
                fixed_version_id = fixed_version_name ? version_id_for_name!(project,fixed_version_name,add_versions) : nil  

            rescue ActiveRecord::RecordNotFound
                @failed_count += 1
                row['fails reason'] = "record not found because of version"
                @failed_issues[@failed_count] = row

                #flash_message(:warning, "When updating issue #{@failed_count} below, the #{@unfound_class} #{@unfound_key} was not found")
                logger.info "When updating issue #{@failed_count} below, the #{@unfound_class} #{@unfound_key} was not found"
                next          
            end


            begin
            issue = issue_for_unique_attr(unique_attr,row[@header_index_hash[unique_field]],row)
            # ignore other project's issue or not
            if issue.project_id != @project.id 
                @skip_count += 1
                logger.info "Skip record, not the same project: {#{row[@header_index_hash[unique_field]]}}"
                next
            end

            # ignore closed issue except reopen
            if issue.status.is_closed?
                if status == nil || status.is_closed?
                    @skip_count += 1
                    logger.info "Skip record, issue is closed: {#{row[@header_index_hash[unique_field]]}}"
                    next
                end
            end

            rescue NoIssueForUniqueValue
                @failed_count += 1
                row['fails reason'] = "record not found: NoIssueForUniqueValue"
                @failed_issues[@failed_count] = row
                #flash_message(:warning, "Could not update issue #{@failed_count} below, [no match] for the value {#{row[@header_index_hash[unique_field]]}} were found")
                logger.info "Could not update issue #{@failed_count} below, [no match] for the value {#{row[@header_index_hash[unique_field]]}} were found"
                next
            rescue MultipleIssuesForUniqueValue
                @failed_count += 1
                row['fails reason'] = "record not found: MultipleIssuesForUniqueValue."
                @failed_issues[@failed_count] = row
                #flash_message(:warning, "Could not update issue #{@failed_count} below, [multiple matches] for the value {#{row[@header_index_hash[unique_field]]}} were found")
                logger.info "Could not update issue #{@failed_count} below, [multiple matches] for the value {#{row[@header_index_hash[unique_field]]}} were found"
                next
            rescue Exception=>msg
            #flash_message(:warning,msg)
                @failed_count += 1
                row['fails reason'] = "record not found: Unhandle except while search for issue"
                @failed_issues[@failed_count] = row
                logger.info "Unhandle except while search for issue {#{row[@header_index_hash[unique_field]]}}"
                next
            end 

            # update
            if fixed_version_id != nil
            issue.fixed_version_id = fixed_version_id
            logger.info "update: fixed_version_id is {#{fixed_version_id}}"
            end
          
          
            # save
            unless issue.save
                logger.info "Error occurs while saving, for the value {#{row[@header_index_hash[unique_field]]}} were found"
                @failed_count += 1
            else
                logger.info "success to update {#{row[@header_index_hash[unique_field]]}}"
                @update_count += 1 
            end

        end
        if @failed_issues.size > 0
          @failed_issues = @failed_issues.sort
          @headers = @failed_issues[0][1].headers
        end
        # Clean up after ourselves
        iip.delete

        # Garbage prevention: clean up iips older than 3 days
        UpdateInProgresses.delete_all(["created < ?",Time.new - 3*24*60*60])

    end






    # Returns the id for the given version or raises RecordNotFound.
    # Implements a cache of version ids based on version name
    # If add_versions is true and a valid name is given,
    # will create a new version and save it when it doesn't exist yet.
    def version_id_for_name!(project,name,add_versions)
    
       
      if !@version_id_by_name.has_key?(name)
        version = Version.find_by_project_id_and_name(project.id, name)
        if !version
          if name && (name.length > 0) && add_versions
            version = project.versions.build(:name=>name)
            version.save
          else
            @unfound_class = "Version"
            @unfound_key = name
            raise ActiveRecord::RecordNotFound, "No version named #{name}"
          end
        end
        @version_id_by_name[name] = version.id
      end
      @version_id_by_name[name]
    end
  
  
    def issue_for_unique_attr(unique_attr, attr_value, row_data)
      if @issue_by_unique_attr.has_key?(attr_value)
        return @issue_by_unique_attr[attr_value]
      end
  
      if unique_attr == "id"
        issues = [Issue.find_by_id(attr_value)]
      else
        # Use IssueQuery class Redmine >= 2.3.0
        begin
          if Module.const_get('IssueQuery') && IssueQuery.is_a?(Class)
            query_class = IssueQuery
          end
        rescue NameError
          query_class = Query
        end
  
        query = query_class.new(:name => "_importer", :project => @project)
        query.add_filter("status_id", "*", [1])
        query.add_filter(unique_attr, "=", [attr_value])

        issues = Issue.find :all, :conditions => query.statement, :limit => 2, :include => [ :assigned_to, :status, :tracker, :project, :priority, :category, :fixed_version ]
      end
      
      if issues.size > 1
          raise MultipleIssuesForUniqueValue, "Unique field #{unique_attr} with value '#{attr_value}' has duplicate record"
      else
        if issues.size == 0
          raise NoIssueForUniqueValue, "No issue with #{unique_attr} of '#{attr_value}' found"
        end
        issues.first
      end
    end
 

    def user_id_for_login!(login)
        user = user_for_login!(login)
        user ? user.id : nil
    end
    # Returns the id for the given user or raises RecordNotFound
    # Implements a cache of users based on login name
    def user_for_login!(login)
        begin
          if !@user_by_login.has_key?(login)
            @user_by_login[login] = User.find_by_login!(login)
          end
          @user_by_login[login]
        rescue ActiveRecord::RecordNotFound
       
          raise
        end
    end
    





  
  private
  
    def find_project
      @project = Project.find(params[:project_id])
    end
    
    def flash_message(type, text)
      flash[type] ||= ""
      flash[type] += "#{text}<br/>"
    end

        def _general_log(module_name, operation_name, args_list = [])
            args_str = ''
            args_list.each do |arg|
                args_str += arg.to_s + ','
            end
            Rails.logger.info 'SystemAnalyze;' + Time.now.strftime("%Y-%m-%d %H:%M:%S").to_s + ';' + (User.current.blank? ? 'blank': User.current.to_s) + ';' + module_name.to_s + ";" +operation_name.to_s + ';' + args_str  
    
        end    
    
    
end
